
/*"Array" of names and colors to select from id*/
@theoremEnvironmentNames:
theorem axiom conjecture corollary proposition lemma claim condition
warning paradox
example
observation fact remark acknowledgement algorithm notation criterion
idea definition conclusion summary;

@theoremEnvironmentColors:
green green green green green green green green
red
yellow yellow
cyan cyan cyan cyan cyan cyan cyan
blue blue blue blue;

/*The faux loop the doesn't end up in the final css
@index is the counter
length(@theoremEnvironmentNames) is the total number of loops*/
.loopingClass (@index) when (@index <= length(@theoremEnvironmentNames)){

   /*This is the name of the class*/
   @nameOfClass: extract(@theoremEnvironmentNames, @index);
   
   /* .definition{ */
   .@{nameOfClass} { 

      /*Here are our properties that get adjusted with the index*/
      background-color: lighten(extract(@theoremEnvironmentColors, @index),80%);
      /*These are the things that are common to all environments */
      border-radius: 4pt;
      padding: 4pt;
      margin-top: 4pt;
      margin-bottom: 4pt;
   }
   .@{nameOfClass} > p:first-child:before
   {
      content:"@{nameOfClass}. ";
      display: inline;
      text-transform: capitalize;   /* CSS here only applies to one word, like "Theorem." or "Example." */
      font-weight: bold; 
   } 

   /*Here we increment our loop*/
   .loopingClass(@index + 1);
}

/* Aha -- without this, you end up trying to execute the code above
when @index is out of the bounds declared by the when clause. This 
throws an "unexpected input" error??  No. It turns out this is unnecessary (??)
    .loopingClass (20) {} 
*/

/*This calls the loop and starts it. */
.loopingClass(1);
